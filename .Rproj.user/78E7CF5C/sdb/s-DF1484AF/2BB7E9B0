{
    "contents" : "---\ntitle: \"DecisionCurve Tutorial (v.1.0)\"\nauthor: \"Marshall Brown\"\ndate: \"January 1, 2016\"\noutput: \n  html_document: \n    theme: cerulean\n---\n\nDecision curves are a useful tool to evaluate the population impact of adopting a risk prediction instrument into clinical practice. Given one or more instruments (risk models) that predict the probability of a binary outcome, this package calculates and plots decision curves, which display estimates of the standardized net benefit by the probability threshold used to categorize observations as 'high risk.' Curves can be estimated using data from an observational cohort, or from case-control studies when an estimate of the population outcome prevalence is available.\n\nConfidence intervals calculated using the bootstrap can be displayed anda wrapper function to calculate cross-validated curves using k-fold cross-validation is also included. \n\n## Install the package \n\nAfter downloading the package here:\n\n[https://github.com/mdbrown/DecisionCurve/releases](https://github.com/mdbrown/DecisionCurve/releases)\n\nnavigate to the source package and use \n\n\n```{r, eval = FALSE}\ninstall.packages(\"../DecisionCurve_1.0.tar.gz\", repos = NULL, type = \"source\")\n```\n\n or install the package directly from github. \n \n```{r, eval = FALSE}\n## install.packages(\"devtools\")\nlibrary(devtools)\ninstall_github(\"mdbrown/DecisionCurve\")\n```\n\n## Getting started \n\nLoad the package and the provided simulated data set.  First we use the function `decision_curve` to create a decision curve object for a logistic model to predict cancer status using age, gender and smoking status. We then plot it using `plot_decision_curve`. \n\n```{r, message=FALSE}\nlibrary(DecisionCurve, quietly = TRUE)\n\n#load simulated data \ndata(dcaData)\n\nhead(dcaData)\n\nset.seed(123)\n#first use DecisionCurve with the default settings (set bootstraps = 50 here to reduce computation time). \nbaseline.model <- decision_curve(Cancer~Age + Female + Smokes, #fitting a logistic model\n                                data = dcaData, \n                                study.design = \"cohort\", \n                                bootstraps = 50)\n\n#plot the curve\nplot_decision_curve(baseline.model,  curve.names = \"baseline model\")\n```\n\nNext, we create a decision curve with two markers added to the original baseline model. We then pass a list with both decision curves to `plot_decision_curve' to plot both curves. \n\n```{r, message=FALSE}\nset.seed(123)\nfull.model <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,\n              data = dcaData, \n              bootstraps = 50)\n\n#since we want to plot more than one curve, we pass a list of 'DecisionCurve' objects to the plot\nplot_decision_curve( list(baseline.model, full.model), \n                   curve.names = c(\"Baseline model\", \"Full model\")) \n\n#see all available options using \n?decision_curve\n?plot_decision_curve\n```\n\n## Other plot functions \n\nWe include two other functions `plot_roc_components` and `plot_clinical_impact`.\n\n`plot_roc_components` plots the components of the ROC curve-true positive rate and false positive rates-over a range of high risk thresholds. \n\nIf we were to use the specified model to classify 1,000 hypothetical subjects, `plot_clinical_impact` plots the number classified as high risk and the number with the outcome classified as high risk for a given high risk threshold. \n\n```{r, message=FALSE}\n#plot the components of the roc curve--true positive rate and false positive rate\nplot_roc_components(full.model,  xlim = c(0, 0.4), \n                    col = c(\"black\", \"red\"))\n#plot the clinical impact \nplot_clinical_impact(full.model, xlim = c(0, .4), \n                     col = c(\"black\", \"blue\"))\n```\n\n## Tweaking the defaults \n\nWe show several examples of how one might change the default settings. \n\n - Fine tune the thresholds, move the legend, and change linewidth and colors. Here we are calculating many more points on the curve (see the 'thresholds' setting).\n\n```{r, message=FALSE}\n\nbaseline.model <- decision_curve(Cancer~Age + Female + Smokes,\n                                data = dcaData, \n                                 thresholds = seq(0, .4, by = .001),# calculate thresholds from 0-0.4 at every 0.001 increment. \n                                bootstraps = 25)\n\nfull.model <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,\n                            data = dcaData, \n                            thresholds = seq(0, .4, by = .001),# calculate thresholds from 0-0.4 at every 0.001 increment. \n                            bootstraps = 25)\n\n\nplot_decision_curve( list(baseline.model, full.model), \n                   curve.names = c(\"Baseline model\", \"Full model\"),\n                   col = c(\"blue\", \"red\"), \n                   lty = c(1,2), \n                   lwd = c(3,2, 2, 1),  # the first two correspond to the decision curves, then 'all' and then 'none' \n                   legend.position = \"bottomright\") #adjust the legend position\n\n```\n\n - No confidence intervals, cost:benefit ratio axis, or legend\n\n```{r, message=FALSE}\nplot_decision_curve( list(baseline.model, full.model), \n                   curve.names = c(\"Baseline model\", \"Full model\"),\n                   col = c(\"blue\", \"red\"), \n                   confidence.intervals = FALSE,  #remove confidence intervals\n                   cost.benefit.axis = FALSE, #remove cost benefit axis\n                   legend.position = \"none\") #remove the legend \n\n```\n\n - Print specific cost:benefit ratios. \n\n```{r, message=FALSE}\nplot_decision_curve( list(baseline.model, full.model), \n                   curve.names = c(\"Baseline model\", \"Full model\"),\n                   col = c(\"blue\", \"red\"), \n                  cost.benefits = c(\"1:1000\", \"1:4\", \"1:9\", \"2:3\", \"1:3\"),  #set specific cost benefits\n                   legend.position = \"bottomright\") \n\n```\n\n - Plot net benefit instead of standardize net benefit, change confidence interval level.\n\n```{r, message=FALSE}\n\nbaseline.model <- decision_curve(Cancer~Age + Female + Smokes,\n                                data = dcaData, \n                                thresholds = seq(0, .4, by = .01),\n                                confidence.intervals = 0.9, #calculate 90% confidence intervals\n                                bootstraps = 25)\n \nfull.model <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,\n                            data = dcaData, \n                            thresholds = seq(0, .40, by = .01),\n                            confidence.intervals = 0.9, #calculate 90% confidence intervals\n                            bootstraps = 25)\n\nplot_decision_curve( list(baseline.model, full.model), \n                   curve.names = c(\"Baseline model\", \"Full model\"),\n                   col = c(\"blue\", \"red\"), \n                   ylim = c(-0.05, 0.15), #set ylim\n                   lty = c(2,1), \n                   standardize = FALSE, #plot Net benefit instead of standardized net benefit\n                   legend.position = \"topright\") \n\n```\n\n\n# Providing fitted risks\n\nIf a risk model has already been specified, and so no model fitting is needed, the user can specify `fitted.risks=TRUE` and provide them in the formula. No model fitting will be done and bootstrap confidence intervals will be conditional on the fitted model. \n\n\n```{r, message=FALSE}\n\n#helper function\n\nexpit <- function(xx) exp(xx)/ (1+exp(xx))\n# Assume we have access to previously published models \n# (or models built using a training set)\n# that we can use to predict the risk of cancer. \n\n# Basic model using demographic variables: Age, Female, Smokes. \ndcaData$BasicModel <- with(dcaData, expit(-7.3 + 0.18*Age - 0.08*Female + 0.80*Smokes ) )\n\n# Model using demographic + markers : Age, Female, Smokes, Marker1 and Marker2. \ndcaData$FullModel <- with(dcaData, expit(-10.5 + 0.22*Age  - 0.01*Female + 0.91*Smokes + 2.03*Marker1 - 1.56*Marker2))\n\n\nfull.model <- decision_curve(Cancer~FullModel,\n                            data = dcaData,\n                            fitted.risk = TRUE, \n                            thresholds = seq(0, .4, by = .05),\n                            bootstraps = 25) \n\n\nplot_decision_curve(full.model, legend.position = \"none\")\n\n```\n\n\n\n# Printing estimates \n\nDecisionCurve also outputs all calculations and point estimates when assigned to an object. \n\n```{r, message=FALSE}\nfull.model <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,\n                            data = dcaData, \n                            thresholds = seq(0, .4, by = .05),\n                            bootstraps = 25) \n```\n\nThe best way to look at point estimates (w/ci's) is to use `summary`. \n\n```{r, message=FALSE}\nsummary(full.model) #outputs standardized net benefit by default\n```\n\nyou can also choose which measure to report, and how many decimal places to print. \n\n```{r, message=FALSE}\nsummary(full.model, nround = 2, measure = \"TPR\") #outputs standardized net benefit by default\n```\n\n\nYou can also access the data directly. `full.model$derived.data` holds the net benefit and it's components. \n\n```{r, message=FALSE}\nhead(full.model$derived.data)\n```\n\n# Case-Control data\n\nIf data is from a case-control study instead of an observational cohort, an estimate of the population level outcome prevalence is needed to calculate decision curves. Decision curves can be calculated by setting `study.design = \"case-control\"` and setting the `population.prevalence`. Once the `decision_curve` is calculated, all other calls to the plot functions remain the same. Note that bootstrap sampling is done stratified by outcome status for these data. \n\n```{r, message =FALSE}\n#simulated case-control data with same variables as above\ndata(dcaData_cc)\n\n#estimated from the population where the \n#case-control sample comes from. \npopulation.rho = 0.11\n\nbaseline.model_cc <- decision_curve(Cancer~Age + Female + Smokes,\n                                    data = dcaData_cc, \n                                    thresholds = seq(0, .4, by = .01),\n                                    bootstraps = 25, \n                                    study.design = \"case-control\", \n                                    population.prevalence = population.rho)\n\nfull.model_cc <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,\n                                data = dcaData_cc, \n                                thresholds = seq(0, .4, by = .01),\n                                bootstraps = 25, \n                                study.design = \"case-control\", \n                                population.prevalence = population.rho)\n\n\nplot_decision_curve( list(baseline.model_cc, full.model_cc), \n                   curve.names = c(\"Baseline model\", \"Full model\"),\n                   col = c(\"blue\", \"red\"), \n                   lty = c(1,2), \n                   lwd = c(3,2, 2, 1), \n                   legend.position = \"bottomright\") \n```\n\n\n\n# Cross-validation \n\nWhen evaluating a model using the same \n\n```{r, message =FALSE}\n\nfull.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,\n                                    data = dcaData,\n                                    folds = 5, \n                                    thresholds = seq(0, .4, by = .01))\n\nfull.model_apparent <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,\n                                data = dcaData, \n                                thresholds = seq(0, .4, by = .01),\n                                confidence.intervals = 'none')\n\n\nplot_decision_curve( list(full.model_apparent, full.model_cv), \n                   curve.names = c(\"Apparent curve\", \"Cross-validated curve\"),\n                   col = c(\"red\", \"blue\"), \n                   lty = c(2,1), \n                   lwd = c(3,2, 2, 1), \n                   legend.position = \"bottomright\") \n```\n\n",
    "created" : 1452637442353.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2878297000",
    "id" : "2BB7E9B0",
    "lastKnownWriteTime" : 1452637443,
    "path" : "~/DecisionCurve-All/DecisionCurve/inst/notes/tutorial.Rmd",
    "project_path" : "inst/notes/tutorial.Rmd",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_markdown"
}