{
    "contents" : "#'Plot the net benefit curves from a decision_curve object or many decision_curve objects\n#'\n#' @param x 'decision_curve' object to plot or a list of 'decision_curve' objects. Assumes output from function 'decision_curve'\n#' @param curve.names vector of names to use when plotting legends.\n#' @param cost.benefit.axis logical (default TRUE) indicating whether to print an additional x-axis showing relative cost:benefit ratios in addition to risk thresholds.\n#' @param n.cost.benefits number of cost:benefit ratios to print if cost.benefit.axis = TRUE (default n.cost.benefit = 6).\n#' @param cost.benefits Character vector of the form c(\"c1:b1\", \"c2:b2\", ..., \"cn:bn\") with integers ci, bi corresponding to specific cost:benefit ratios to print. Default allows the function to calculate these automatically.\n#' @param standardize logical (default TRUE) indicating whether to use the standardized net benefit (NB/disease prevalence) or not.\n#' @param confidence.intervals logical indicating whether to plot confidence intervals.\n#' @param col vector of color names to be used in plotting corresponding to the 'predictors' given. Default colors will be chosen from rainbow(..., v = .8). See details for more information on plot parameters.\n#' @param lty vector of linetypes.\n#' @param lwd vector of linewidths.\n#' @param xlim vector giving c(min, max) of x-axis. Defaults to c(min(thresholds), max(thresholds)).\n#' @param ylim vector giving c(min, max) of y-axis.\n#' @param xlab label of main x-axis.\n#' @param ylab label of y-axis.\n#' @param cost.benefit.xlab label of cost:benefit ratio axis.\n#' @param legend.position character vector giving position of legend. Options are \"topright\" (default), \"right\", \"bottomright\", \"bottom\", \"bottomleft\", \"left\", \"topleft\", \"top\", or \"none\".\n#' @param ... other options directly send to plot()\n#' @details When k decision_curve objects are input, the first k elements of col, lty, lwd ... correspond to the curves provided. The next two elements (..., k+1, k+2) correspond to the attributes of the 'all' and 'none' curves. See below for an example.\n#' @examples\n#'data(dcaData)\n#'set.seed(123)\n#'baseline.model <- decision_curve(Cancer~Age + Female + Smokes,\n#'                                 data = dcaData,\n#'                                 thresholds = seq(0, .4, by = .005),\n#'                                 bootstraps = 10)\n#'\n#'#plot using the defaults\n#'plot_decision_curve(baseline.model,  curve.names = \"baseline model\")\n#'\n#'set.seed(123)\n#'full.model <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,\n#'                             data = dcaData,\n#'                             thresholds = seq(0, .4, by = .005),\n#'                             bootstraps = 10)\n#'\n#'# for lwd, the first two positions correspond to the decision curves, then 'all' and 'none'\n#'plot_decision_curve( list(baseline.model, full.model),\n#'                     curve.names = c(\"Baseline model\", \"Full model\"),\n#'                     col = c(\"blue\", \"red\"),\n#'                     lty = c(1,2),\n#'                     lwd = c(3,2, 2, 1),\n#'                     legend.position = \"bottomright\")\n#'\n#No confidence intervals, cost:benefit ratio axis, or legend\n#'\n#'plot_decision_curve( list(baseline.model, full.model),\n#'                     curve.names = c(\"Baseline model\", \"Full model\"),\n#'                     col = c(\"blue\", \"red\"),\n#'                     confidence.intervals = FALSE,  #remove confidence intervals\n#'                     cost.benefit.axis = FALSE, #remove cost benefit axis\n#'                     legend.position = \"none\") #remove the legend\n#'\n#'#Set specific cost:benefit ratios.\n#'\n#'plot_decision_curve( list(baseline.model, full.model),\n#'                     curve.names = c(\"Baseline model\", \"Full model\"),\n#'                     col = c(\"blue\", \"red\"),\n#'                     cost.benefits = c(\"1:1000\", \"1:4\", \"1:9\", \"2:3\", \"1:3\"),\n#'                     legend.position = \"bottomright\")\n#'\n#'#Plot net benefit instead of standardize net benefit.\n#'\n#'plot_decision_curve( list(baseline.model, full.model),\n#'                     curve.names = c(\"Baseline model\", \"Full model\"),\n#'                     col = c(\"blue\", \"red\"),\n#'                     ylim = c(-0.05, 0.15), #set ylim\n#'                     lty = c(2,1),\n#'                     standardize = FALSE, #plot Net benefit instead of standardized net benefit\n#'                    legend.position = \"topright\")\n#'\n#'\n#' @export\n\nplot_decision_curve <- function(x, curve.names,\n                               cost.benefit.axis = TRUE,\n                               n.cost.benefits = 6,\n                               cost.benefits,\n                               standardize = TRUE,\n                               confidence.intervals,\n                               col,\n                               lty, lwd = 2,\n                               xlim, ylim,\n                               xlab = \"Risk Threshold\", ylab,\n                               cost.benefit.xlab = \"Cost:Benefit Ratio\",\n                               legend.position = c(\"topright\", \"right\", \"bottomright\", \"bottom\", \"bottomleft\", \"left\", \"topleft\", \"top\", \"none\"),\n                               ...){\n\n  legend.position <- match.arg(legend.position)\n\n  if(missing(curve.names)) curve.names  <- NA\n  if(missing(confidence.intervals)) confidence.intervals <- NA\n\n  prepData <- preparePlotData(x = x,\n                             curve.names = curve.names,\n                             confidence.intervals = confidence.intervals)\n\n  predictors <- prepData$predictors\n  dc.data <- prepData$dc.data\n  confidence.intervals <- prepData$confidence.intervals\n  rm(prepData)\n\n  #set some defaults if needed\n  if(missing(xlim)) xlim = range(dc.data$thresholds)\n\n  if(missing(lty)) lty = rep(1, length(predictors) + 2)\n  if(length(lty) ==1) lty = rep(lty, length(predictors) + 2)\n  if(length(lty) == length(predictors)) lty = c(lty, 1, 1)\n\n  if(missing(col)) col  = c(rainbow(length(predictors), v = .8), \"grey66\", \"black\")\n  if(length(col) == length(predictors)) col <- c(col, \"grey66\", \"black\")\n\n  if(missing(lwd)) lwd = 2\n  if(length(lwd) ==1) lwd <- rep(lwd, length(predictors))\n  if(length(lwd) == length(predictors)) lwd = c(lwd, 1, 1)\n\n  if(missing(ylab)) ylab <- ifelse(standardize, \"Standardized Net Benefit\", \"Net Benefit\")\n\n    if(missing(ylim)){\n\n    if(standardize) ylim = c(-1, 1)\n    else ylim = c(-0.05, 1.1*max(dc.data[[\"NB\"]][is.finite(dc.data[[\"NB\"]])]))\n\n  }\n\n  plot_generic(xx = dc.data,\n               predictors = predictors,\n               value = ifelse(standardize, \"sNB\", \"NB\"),\n               plotNew = TRUE,\n               standardize = standardize,\n               confidence.intervals,\n               cost.benefit.axis = cost.benefit.axis,\n               cost.benefits = cost.benefits,\n               n.cost.benefits = n.cost.benefits,\n               cost.benefit.xlab = cost.benefit.xlab,\n               xlab = xlab, ylab = ylab,\n               col = col,\n               lty = lty, lwd = lwd,\n               xlim = xlim, ylim = ylim,\n               legend.position = legend.position, ...)\n\n}\n\n#'Plot the components of a ROC curve by the high risk thresholds.\n#' @description Plot the components of the ROC curve --the true positive rates and false positive rates-- by high risk thresholds.\n#' @param x decision_curve object to plot. Assumes output from function 'decision_curve'\n#' @param cost.benefit.axis logical (default TRUE) indicating whether to print an additional x-axis showing relative cost:benefit ratios in addition to risk thresholds.\n#' @param n.cost.benefits number of cost:benefit ratios to print if cost.benefit.axis = TRUE (default n.cost.benefit = 6).\n#' @param cost.benefits Character vector of the form c(\"c1:b1\", \"c2:b2\", ..., \"cn:bn\") with integers ci, bi corresponding to specific cost:benefit ratios to print. Default allows the function to calculate these automatically.\n#' @param confidence.intervals logical indicating whether to plot confidence intervals.\n#' @param col vector of length two indicating the color for the true positive rates and false positive rates, respectively.\n#' @param lty.fpr linetype for the false positive rate curve.\n#' @param lty.tpr linetype for the true positive rate curve.\n#' @param lwd vector of linewidths. The first element corresponds to the tpr and the second to the fpr.\n#' @param xlim vector giving c(min, max) of x-axis. Defaults to c(min(thresholds), max(thresholds)).\n#' @param ylim vector giving c(min, max) of y-axis.\n#' @param xlab label of main x-axis.\n#' @param ylab label of y-axis.\n#' @param cost.benefit.xlab label of cost:benefit ratio axis.\n#' @param legend.position character vector giving position of legend. Options are \"topright\" (default), \"right\", \"bottomright\", \"bottom\", \"bottomleft\", \"left\", \"topleft\", \"top\", or \"none\".\n#' @param ... other options directly send to plot()\n#'\n#' @examples\n#'data(dcaData)\n#'set.seed(123)\n#'baseline.model <- decision_curve(Cancer~Age + Female + Smokes,\n#'                                 data = dcaData,\n#'                                 thresholds = seq(0, .4, by = .001),\n#'                                 bootstraps = 25) #should use more bootstrap replicates in practice!\n#'\n#'#plot using the defaults\n#'plot_roc_components(baseline.model,  xlim = c(0, 0.4), col = c(\"black\", \"red\"))\n#'\n#'\n#' @export\n\n\nplot_roc_components <- function(x,\n                              cost.benefit.axis = TRUE,\n                              n.cost.benefits = 6,\n                              cost.benefits,\n                              confidence.intervals,\n                              col = \"black\",\n                              lty.fpr = 2,\n                              lty.tpr = 1,\n                              lwd = 2,\n                              xlim, ylim,\n                              xlab = \"Risk Threshold\", ylab,\n                              cost.benefit.xlab = \"Cost:Benefit Ratio\",\n                              legend.position = c(\"topright\", \"right\", \"bottomright\", \"bottom\", \"bottomleft\", \"left\", \"topleft\", \"top\", \"none\"),\n                              ...){\n\n  if(class(x) != \"decision_curve\") stop(\"x must be an object of class 'decision_curve'-- plot_roc_components is only functional for one decision curve at a time.\")\n\n  legend.position <- match.arg(legend.position)\n\n # if(missing(curve.names)) curve.names  <- NA\n  if(missing(confidence.intervals)) confidence.intervals <- NA\n\n  prepData <- preparePlotData(x = x,\n                              curve.names = NA,\n                              confidence.intervals = confidence.intervals)\n\n  predictors <- prepData$predictors\n  dc.data <- prepData$dc.data\n  confidence.intervals <- prepData$confidence.intervals\n  rm(prepData)\n\n  #set some defaults if needed\n  if(missing(xlim)) xlim = range(dc.data$thresholds)\n\n  if(length(col) ==1 ) col <- rep(col, 2)\n\n  if(missing(lwd)) lwd = 2\n  if(length(lwd) ==1) lwd <- rep(lwd, length(predictors))\n  if(length(lwd) == length(predictors)) lwd = c(lwd, 1, 1)\n\n  if(missing(ylab)) ylab <- \"Probability\"\n\n  if(missing(ylim)) ylim = c(0, 1)\n\n\n  plot_generic(xx = dc.data,\n               predictors = predictors,\n               value = \"TPR\",\n               plotNew = TRUE,\n               standardize = FALSE,\n               confidence.intervals,\n               cost.benefit.axis = cost.benefit.axis,\n               cost.benefits = cost.benefits,\n               n.cost.benefits = n.cost.benefits,\n               cost.benefit.xlab = cost.benefit.xlab,\n               xlab = xlab, ylab = ylab,\n               col = col,\n               lty = lty.tpr, lwd = lwd,\n               xlim = xlim, ylim = ylim,\n               legend.position = \"none\",\n               ...)\n\n  plot_generic(xx = dc.data,\n               predictors = predictors,\n               value = \"FPR\",\n               plotNew = FALSE,\n               standardize = FALSE,\n               confidence.intervals,\n               cost.benefit.axis = cost.benefit.axis,\n               cost.benefits = cost.benefits,\n               n.cost.benefits = n.cost.benefits,\n               cost.benefit.xlab = cost.benefit.xlab,\n               xlab = xlab, ylab = ylab,\n               col = col,\n               lty = lty.fpr, lwd = lwd,\n               xlim = xlim, ylim = ylim,\n               legend.position = legend.position,\n               lty.fpr = lty.fpr,\n               lty.tpr = lty.tpr,\n               tpr.fpr.legend = TRUE,\n               ...)\n\n\n\n}\n\n#'Plot the clinical impact curve from a DecisionCurve object.\n#'\n#' @description For a given population size, plot the number of subjects classified as high risk, and the number of subjects classified high risk with the outcome of interest at each high risk threshold.\n#' @param x decision_curve object to plot. Assumes output from function 'decision_curve'\n#' @param population.size Hypothetical population size (default 1000).\n#' @param cost.benefit.axis logical (default TRUE) indicating whether to print an additional x-axis showing relative cost:benefit ratios in addition to risk thresholds.\n#' @param n.cost.benefits number of cost:benefit ratios to print if cost.benefit.axis = TRUE (default n.cost.benefit = 6).\n#' @param cost.benefits Character vector of the form c(\"c1:b1\", \"c2:b2\", ..., \"cn:bn\") with integers ci, bi corresponding to specific cost:benefit ratios to print. Default allows the function to calculate these automatically.\n#' @param confidence.intervals logical indicating whether to plot confidence intervals.\n#' @param col vector of length two indicating the color for the number high risk and the second to the number high risk with outcome, respectively.\n#' @param lty vector of linetypes. The first element corresponds to the number high risk and the second to the number high risk with outcome.\n#' @param lwd vector of linewidths. The first element corresponds to the number high risk and the second to the number high risk with outcome.\n#' @param xlim vector giving c(min, max) of x-axis. Defaults to c(min(thresholds), max(thresholds)).\n#' @param ylim vector giving c(min, max) of y-axis.\n#' @param xlab label of main x-axis.\n#' @param ylab label of y-axis.\n#' @param cost.benefit.xlab label of cost:benefit ratio axis.\n#' @param legend.position character vector giving position of legend. Options are \"topright\" (default), \"right\", \"bottomright\", \"bottom\", \"bottomleft\", \"left\", \"topleft\", \"top\", or \"none\".\n#' @param ... other options directly send to plot()\n#'\n#' @examples\n#'#'data(dcaData)\n#'set.seed(123)\n#'baseline.model <- decision_curve(Cancer~Age + Female + Smokes,\n#'                                 data = dcaData,\n#'                                 thresholds = seq(0, .4, by = .001),\n#'                                 bootstraps = 25) #should use more bootstrap replicates in practice!\n#'\n#'#plot the clinical impact\n#'plot_clinical_impact(baseline.model, xlim = c(0, .4),\n#'                     col = c(\"black\", \"blue\"))\n#'\n#' @export\n\nplot_clinical_impact <- function(x,\n                                 population.size = 1000,\n                            cost.benefit.axis = TRUE,\n                            n.cost.benefits = 6,\n                            cost.benefits,\n                            confidence.intervals,\n                            col = \"black\",\n                            lty = 1,\n                            lwd = 2,\n                            xlim, ylim,\n                            xlab = \"Risk Threshold\", ylab,\n                            cost.benefit.xlab = \"Cost:Benefit Ratio\",\n                            legend.position = c(\"topright\", \"right\", \"bottomright\", \"bottom\", \"bottomleft\", \"left\", \"topleft\", \"top\", \"none\"),\n                            ...){\n\n  if(class(x) != \"decision_curve\") stop(\"x must be an object of class 'decision_curve'-- plot_roc_components is only functional for one decision curve at a time.\")\n\n  legend.position <- match.arg(legend.position)\n\n  #if(missing(curve.names)) curve.names  <- NA\n  if(missing(confidence.intervals)) confidence.intervals <- NA\n\n  prepData <- preparePlotData(x = x,\n                              curve.names = NA,\n                              confidence.intervals = confidence.intervals)\n\n  predictors <- prepData$predictors\n  dc.data <- prepData$dc.data\n  confidence.intervals <- prepData$confidence.intervals\n  rm(prepData)\n\n  #set some defaults if needed\n  if(missing(xlim)) xlim = range(dc.data$thresholds)\n\n  if(length(col) ==1 ) col <- rep(col, 2)\n\n  if(missing(lwd)) lwd = 2\n  if(length(lwd) ==1) lwd <- rep(lwd, length(predictors))\n  if(length(lwd) == length(predictors)) lwd = c(lwd, 1, 1)\n\n  if(missing(ylab)) ylab <-  paste(\"Number high risk (out of \", population.size,  \")\", sep = \"\")\n\n  if(missing(ylim)) ylim = c(0, population.size*1.05)\n\n  plot_generic(xx = dc.data,\n               predictors = predictors,\n               value = \"prob.high.risk\",\n               plotNew = TRUE,\n               standardize = FALSE,\n               confidence.intervals,\n               cost.benefit.axis = cost.benefit.axis,\n               cost.benefits = cost.benefits,\n               n.cost.benefits = n.cost.benefits,\n               cost.benefit.xlab = cost.benefit.xlab,\n               xlab = xlab, ylab = ylab,\n               col = col,\n               lty = lty, lwd = lwd,\n               xlim = xlim, ylim = ylim,\n               legend.position = \"none\",\n               population.size = population.size,\n               ...) #add my own legend\n\n  plot_generic(xx = dc.data,\n               predictors = predictors,\n               value = \"DP\",\n               plotNew = FALSE,\n               standardize = FALSE,\n               confidence.intervals,\n               cost.benefit.axis = cost.benefit.axis,\n               cost.benefits = cost.benefits,\n               n.cost.benefits = n.cost.benefits,\n               cost.benefit.xlab = cost.benefit.xlab,\n               xlab = xlab, ylab = ylab,\n               col = col,\n               lty = 2, lwd = lwd,\n               xlim = xlim, ylim = ylim,\n               legend.position = legend.position,\n               lty.fpr = 0,\n               lty.tpr = 0,\n               tpr.fpr.legend = FALSE,\n               impact.legend = TRUE,\n               population.size = population.size,\n               ...)\n\n}\n",
    "created" : 1452633062813.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3541707577",
    "id" : "91D65503",
    "lastKnownWriteTime" : 1452583242,
    "path" : "~/DecisionCurve-All/DecisionCurve/R/plot_functions_main.R",
    "project_path" : "R/plot_functions_main.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}