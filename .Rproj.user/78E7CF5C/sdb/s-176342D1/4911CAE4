{
    "contents" : "#################################################\n## Decision Curve Analysis for Binary Outcomes ##\n#################################################\n\n# Basic Data Set-up\n  #Set our directory\n  setwd(\"~/decisioncurveanalysis\")\n  #Source file to use dca command\n  source(\"../decisioncurveanalysis/dca.R\")\n  data.set = read.delim(\"../decisioncurveanalysis/dca.txt\", header=TRUE, sep=\"\\t\")\n  attach(data.set)\n\n# Univariate Decision Curve Analysis\n  #Test whether family history is associated with cancer\n  summary(glm(cancer ~ famhistory, family=binomial(link=\"logit\")))\n  #Run the decision curve: family history is coded as 0 or 1, i.e. a probability\n  #so no need to specify the ?prob? option\n  dca(data=data.set, outcome=\"cancer\", predictors=\"famhistory\")\n\n  #Restricting Threshold Probability\n  dca(data=data.set, outcome=\"cancer\", predictors=\"famhistory\", xstop=0.35)\n\n# Multivariable Decision Curve Analysis\n  #run the multivariable model\n  model = glm(cancer ~ marker + age + famhistory, family=binomial(link=\"logit\"))\n  #save out predictions in the form of probabilities\n  data.set$cancerpredmarker = predict(model, type=\"response\")\n\n  #Run decision curve\n  dca(data=data.set, outcome=\"cancer\", predictors=c(\"cancerpredmarker\",\"famhistory\"),\n  xstop=0.35)\n\n# Evaluation of Published Models\n  #Use the coefficients from the Brown model\n  logodds_Brown = 0.75*(famhistory)+0.26*(age)-17.5\n  #Convert to predicted probability\n  data.set$phat_Brown = exp(logodds_Brown)/(1+exp(logodds_Brown))\n  #Run the decision curve analysis\n  dca(data=data.set, outcome=\"cancer\", predictors=\"phat_Brown\", xstop=0.35)\n\n# Joint or Conditional Tests\n  #Create a variable for the strategy of treating only high risk patients\n  #This will be 1 for treat and 0 for don?t treat\n  data.set$high_risk = ifelse(risk_group==\"high\", 1, 0)\n  #Treat based on Joint Approach\n  data.set$joint = ifelse(risk_group==\"high\" | cancerpredmarker > 0.15, 1, 0)\n  #Treat based on Conditional Approach\n  data.set$conditional = ifelse(risk_group==\"high\" | (risk_group==\"intermediate\" &\n  cancerpredmarker > 0.15), 1, 0)\n\n  #Run decision curve analysis\n  dca(data=data.set, outcome=\"cancer\", predictors=c(\"high_risk\", \"joint\",\n  \"conditional\"), xstop=0.35)\n\n#Incorporating Harms into Model Assessment\n  #the harm of measuring the marker is stored in a scalar\n  harm_marker = 0.0333\n  #in the conditional test, only patients at intermediate risk\n  #have their marker measured\n  intermediate_risk = ifelse(risk_group==\"intermediate\", c(1), c(0))\n  #harm of the conditional approach is proportion of patients who have the marker\n  #measured multiplied by the harm\n  harm_conditional = mean(intermediate_risk)*harm_marker\n  #Run the decision curve\n  dca(data=data.set, outcome=\"cancer\", predictors=c(\"high_risk\", \"joint\",\n  \"conditional\"), harm=c(0, harm_marker, harm_conditional),\n  xstop=0.35)\n\n# Saving out Net Benefit Values\n  #Run the decision curve, specify xby=0.05 since we want 5% increments\n  output = dca(data=data.set, outcome=\"cancer\", predictors=\"marker\", probability=F,\n  xstart=0.05, xstop=0.35, xby=0.05, graph=F)\n  #Calculate difference between marker and treat all\n  #Our standard approach is to biopsy everyone so this tells us\n  #how much better we do with the marker\n  output$net.benefit$advantage=output$net.benefit$marker-output$net.benefit$all\n  #To view the table, simply call on the variable that it?d stored in\n  output\n\n# Interventions Avoided\n  dca(data=data.set, outcome=\"cancer\", predictors=\"marker\", probability=FALSE,\n  intervention=TRUE, xstart=0.05, xstop=0.35)\n\n###################################################\n## Decision Curve Analysis for Survival Outcomes ##\n###################################################\nlibrary(survival)\n# Basic Data Set-up\n  #Source file to use stdca command\n  source(\"stdca.R\")\n  #Creates a survival object with time to event variable as ttcancer and the event is\n  #cancer.\n  Srv = Surv(data.set$ttcancer, data.set$cancer)\n\n\n  #Load survival library\n  library(survival)\n  library(cmprsk)\n  #Run the cox model\n  coxmod = coxph(Srv ~ age + famhistory + marker, data=data.set)\n  #the probability of failure is calculated by subtracting the probability of\n  #survival from 1.\n  data.set$pr_failure18 = c(1- (summary(survfit(coxmod,\n  newdata=data.set), times=1.5)$surv))\n\n  #Run the decision curve analysis (with a smoother)\n  stdca(data=data.set, outcome=\"cancer\", ttoutcome=\"ttcancer\", timepoint=1.5,\n  predictors=\"pr_failure18\", xstop=0.5, smooth=TRUE)\n\n# Decision Curve Analysis with Competing Risks\n\n  #Create failure variable\n  data.set$status = data.set$cancer + data.set$dead * (data.set$cancer==0) * 2\n\n  #We declare the survival data variables within the stdca function and run\n  #the decision curve analysis\n  stdca(data=data.set, outcome=\"status\", ttoutcome=\"ttcancer\", timepoint=1.5,\n  predictors=\"pr_failure18\", cmprsk=TRUE, smooth=TRUE, xstop=0.5)\n\n  #Plotting Kaplan Meier model and Competing Risk model\n    #Kaplan Meier Model\n    km = stdca(data=data.set, outcome=\"cancer\", ttoutcome=\"ttcancer\", timepoint=1.5,\n    predictors=\"pr_failure18\", xstop=0.5)\n\n    #Competing Risk Model\n    cr = stdca(data=data.set, outcome=\"status\", ttoutcome=\"ttcancer\", timepoint=1.5,\n    predictors=\"pr_failure18\", cmprsk=T, xstop=0.5)\n\n    #Plotting the curves\n    plot(km$net.benefit.threshold, km$net.benefit.none, type = \"l\", lwd=2,\n    xlim=c(0,.50), ylim=c(-.05, .20), xlab = \"Threshold Probability\",\n    ylab = \"Net Benefit\")\n    lines(km$net.benefit$threshold, km$net.benefit$all, type=\"l\", col=8, lwd=2)\n    lines(km$net.benefit$threshold, cr$net.benefit$all, type=\"l\", col=8, lwd=2, lty=2)\n    lines(km$net.benefit$threshold, km$net.benefit$pr_failure18, type=\"l\", col=1)\n    lines(cr$net.benefit$threshold, cr$net.benefit$pr_failure18, type=\"l\", col = 1,\n    lty=2)\n    legend(\"topright\", cex=0.8, legend=c(\"None\", \"KM All\", \"CR All\", \"KM Model\", \"CR\n    Model\"), col=c(17, 8, 8, 1, 1), lwd=c(2, 2, 2, 1, 1), lty=c(1, 1, 2, 1, 2))\n\n#########################################################\n## Assessing Clinical Utility in a Case-Control Design ##\n#########################################################\n\n  #Use only the data from the case control study\n  casecontrol = subset(data.set, casecontrol ==1)\n  #Create the model\n  model = glm(cancer~ age + famhistory, family=binomial(link=\"logit\"),\n  data=casecontrol)\n  #Save out the linear predictor\n  xb = predict(model)\n\n  #The true risk is stored in a scalar\n  true = 0.05\n  #The observed risk, the mean of our data, is stored in a scalar\n  design = mean(casecontrol$cancer)\n  #The Bayes factor is stored in a scalar\n  Bayes = log((true/(1-true))/(design/(1-design)))\n  #We add the Bayes factor to the linear predictor\n  xb = xb+Bayes\n\n  #Convert to a probability\n  casecontrol$phat = exp(xb)/(1+exp(xb))\n  #Run the decision curve\n  dca(data=casecontrol, outcome=\"phat\", predictors=\"phat\", xstop=0.35)\n\n############################\n## Correction for Overfit ##\n############################\n  #To skip this optional loop used for running the cross validation multiple times\n  #either 1) change it to ?for (i in 1:1) {? or\n  #2) omit this piece of line and take care to change any code which references ?i?\n  for (i in 1:200) {\n    #Create variables to later store probabilities from each prediction model\n    data.set$pred1=NA\n    data.set$pred2=NA\n\n    #Create a variable to be used to ?randomize? the patients.\n    u = runif(750,0,1)\n    #Sort by event to ensure equal number of patients with the event are in each group\n    data.set = data.set[order(data.set$cancer, u),]\n    #Assign each patient into one of ten groups\n    data.set$group = (seq(1:dim(data.set)[1]) %% 10)+1\n\n    #As R predicts probabilities based on the data that was used to create the model,\n    #we will need to calculate the probabilities ourselves.\n    #Set the constant term as 1.\n    #Create variables to store the log of the odds X?, and hold the model coefficients\n    data.set$xb1=NA\n    data.set$xb2=NA\n    data.set$cons=1\n    mod1=NULL\n    mod2=NULL\n    #Loop through to run through for each of the ten groups\n    for (j in 1:10) {\n      #First for the ?base? model:\n        #Predict the probability of the jth group.\n        mod1[[j]] = glm(cancer~age+famhistory, data=subset(data.set,group!=j),\n        family=binomial)\n        #Calculating and storing X?\n        data.set$xb1[data.set$group==j]=data.matrix(data.set[data.set$group==j,c(\"cons\",\"age\",\n        \"famhistory\")]) %*% mod1[[j]]$coef\n\n      #Likewise, for the second ?final? model\n        mod2[[j]] = glm(cancer~age+famhistory+marker, data=subset(data.set,group!=j),\n        family=binomial)\n        data.set$xb2[data.set$group==j]=data.matrix(data.set[data.set$group==j,c(\"cons\",\"age\",\n        \"famhistory\", \"marker\")]) %*% mod2[[j]]$coef\n    }\n    #Now calculate the probability of having the event for each model\n    data.set$pred1 = 1/(1+exp(-1*(data.set$xb1)))\n    data.set$pred2 = 1/(1+exp(-1*(data.set$xb2)))\n\n    #Running the decision curve.\n    #For those excluding the optional multiple cross validation, this decision curve\n    #to be seen by excluding ?graph=FALSE? and the results (saved under the name of your\n    #choosing) would be the decision curve corrected for overfit.\n    output = dca(data=data.set, outcome=\"cancer\", predictors=c(\"pred1\", \"pred2\"),\n    graph=FALSE, xstop=.5)\n\n    #The following is only used for the multiple 10 fold cross validations.\n    if(i==1){\n      dcaoutput = output$net.benefit\n    } else{\n      #Append all result of the multiple cross validations into the first\n      #file\n      dcaoutput = rbind(dcaoutput, output$net.benefit)\n    }\n  } #This closing bracket, ends the initial loop for the multiple cross validation.\n  #It is also necessary for those who avoided the multiple cross validation by\n  #changing the value of the for loop from 200 to 1\n\n  #Only used for the multiple cross validation. Calculate the average net\n  #benefit across all iterations.\n  data=aggregate(dcaoutput, by=list(dcaoutput$threshold), mean)[-1]\n\n  #Plotting the aces and ?Treat None? Model\n  plot(data$threshold, data$none, type=\"l\", xlim=c(0, 0.50), ylim=c(-0.05, 0.15),\n  lwd=2, xlab=\"Threshold Probability\", ylab=\"Net Benefit\")\n  #Plotting the ?Treat All? Model\n  lines(data$threshold, data$all, type=\"l\", col=8, lwd=2)\n  #Plotting the ?Base? (pred1: only using age and family history) Model\n  lines(data$threshold, data$pred1, type=\"l\", col=2, lwd=2)\n  #Plotting the ?Full? (pred2: using the marker, age and family history) Model\n  lines(data$threshold, data$pred2, type=\"l\", col=1, lwd=2)\n  # Adding a legend to distinguish each of the models.\n  legend(\"topright\", cex=0.8, legend=c(\"(Mean) Net Benefit: Treat None\", \"(Mean) Net\n  Benefit: Treat All\", \"(Mean) Net Benefit: Base Model\", \"(Mean) Net Benefit:\n  Full Model\"), col=c(17, 8, 2, 1), lwd=c(2, 2, 2, 2))\n\n",
    "created" : 1452649592370.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2468363138",
    "id" : "4911CAE4",
    "lastKnownWriteTime" : 1440626956,
    "path" : "~/DecisionCurve-All/decisioncurveanalysis/DCA Tutorial - R Code.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}