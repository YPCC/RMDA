{
    "contents" : "dca <- function(data, outcome, predictors, xstart=0.01, xstop=0.99, xby=0.01, \n  ymin=-0.05, probability=NULL, harm=NULL,graph=TRUE, intervention=FALSE, \n  interventionper=100, smooth=FALSE,loess.span=0.10) {\n  \n  # LOADING REQUIRED LIBRARIES\n  require(stats)\n\n  # data MUST BE A DATA FRAME\n  if (class(data)!=\"data.frame\") {\n      stop(\"Input data must be class data.frame\")\n  }\n  \n  #ONLY KEEPING COMPLETE CASES\n  data=data[complete.cases(data[append(outcome,predictors)]),append(outcome,predictors)]\n\n  # outcome MUST BE CODED AS 0 AND 1\n  if (max(data[[outcome]])>1 | min(data[[outcome]])<0) {\n    stop(\"outcome cannot be less than 0 or greater than 1\")\n  }\n  # xstart IS BETWEEN 0 AND 1\n  if (xstart<0 | xstart>1) {\n    stop(\"xstart must lie between 0 and 1\")\n  }\n  \n  # xstop IS BETWEEN 0 AND 1\n  if (xstop<0 | xstop>1) {\n    stop(\"xstop must lie between 0 and 1\")\n  }\n  \n  # xby IS BETWEEN 0 AND 1\n  if (xby<=0 | xby>=1) {\n    stop(\"xby must lie between 0 and 1\")\n  }\n  \n  # xstart IS BEFORE xstop\n  if (xstart>=xstop) {\n    stop(\"xstop must be larger than xstart\")\n  }\n     \n  #STORING THE NUMBER OF PREDICTORS SPECIFIED\n  pred.n=length(predictors)\n  \n  #IF probability SPECIFIED ENSURING THAT EACH PREDICTOR IS INDICATED AS A YES OR NO\n  if (length(probability)>0 & pred.n!=length(probability)) {\n    stop(\"Number of probabilities specified must be the same as the number of predictors being checked.\")\n  }\n \n  #IF harm SPECIFIED ENSURING THAT EACH PREDICTOR HAS A SPECIFIED HARM\n  if (length(harm)>0 & pred.n!=length(harm)) {\n    stop(\"Number of harms specified must be the same as the number of predictors being checked.\")\n  }\n  \n  #INITIALIZING DEFAULT VALUES FOR PROBABILITES AND HARMS IF NOT SPECIFIED\n  if (length(harm)==0) {\n    harm=rep(0,pred.n)\n  }\n  if (length(probability)==0) {\n    probability=rep(TRUE,pred.n)\n  }\n  \n  \n  #CHECKING THAT EACH probability ELEMENT IS EQUAL TO YES OR NO, \n  #AND CHECKING THAT PROBABILITIES ARE BETWEEN 0 and 1\n  #IF NOT A PROB THEN CONVERTING WITH A LOGISTIC REGRESSION\n  for(m in 1:pred.n) { \n    if (probability[m]!=TRUE & probability[m]!=FALSE) {\n      stop(\"Each element of probability vector must be TRUE or FALSE\")\n    }\n    if (probability[m]==TRUE & (max(data[predictors[m]])>1 | min(data[predictors[m]])<0)) {\n      stop(paste(predictors[m],\"must be between 0 and 1 OR sepcified as a non-probability in the probability option\",sep=\" \"))  \n    }\n    if(probability[m]==FALSE) {\n      model=NULL\n      pred=NULL\n      model=glm(data.matrix(data[outcome]) ~ data.matrix(data[predictors[m]]), family=binomial(\"logit\"))\n      pred=data.frame(model$fitted.values)\n      pred=data.frame(pred)\n      names(pred)=predictors[m]\n      data=cbind(data[names(data)!=predictors[m]],pred)\n      print(paste(predictors[m],\"converted to a probability with logistic regression. Due to linearity assumption, miscalibration may occur.\",sep=\" \"))\n    }\n  }\n\n  # THE PREDICTOR NAMES CANNOT BE EQUAL TO all OR none.\n  if (length(predictors[predictors==\"all\" | predictors==\"none\"])) {\n    stop(\"Prediction names cannot be equal to all or none.\")\n  }  \n  \n  #########  CALCULATING NET BENEFIT   #########\n  N=dim(data)[1]\n  event.rate=colMeans(data[outcome])\n  \n  # CREATING DATAFRAME THAT IS ONE LINE PER THRESHOLD PER all AND none STRATEGY\n  nb=data.frame(seq(from=xstart, to=xstop, by=xby))\n  names(nb)=\"threshold\"\n  interv=nb\n  \n  nb[\"all\"]=event.rate - (1-event.rate)*nb$threshold/(1-nb$threshold)\n  nb[\"none\"]=0\n  \n  # CYCLING THROUGH EACH PREDICTOR AND CALCULATING NET BENEFIT\n  for(m in 1:pred.n){\n    for(t in 1:length(nb$threshold)){\n      # COUNTING TRUE POSITIVES AT EACH THRESHOLD\n      tp=mean(data[data[[predictors[m]]]>=nb$threshold[t],outcome])*sum(data[[predictors[m]]]>=nb$threshold[t])\n      # COUNTING FALSE POSITIVES AT EACH THRESHOLD\n      fp=(1-mean(data[data[[predictors[m]]]>=nb$threshold[t],outcome]))*sum(data[[predictors[m]]]>=nb$threshold[t])\n      #setting TP and FP to 0 if no observations meet threshold prob.\n      if (sum(data[[predictors[m]]]>=nb$threshold[t])==0) {\n        tp=0\n        fp=0\n      }\n      \n      # CALCULATING NET BENEFIT\n      nb[t,predictors[m]]=tp/N - fp/N*(nb$threshold[t]/(1-nb$threshold[t])) - harm[m]\n    }\n    interv[predictors[m]]=(nb[predictors[m]] - nb[\"all\"])*interventionper/(interv$threshold/(1-interv$threshold))\n  }\n  \n  # CYCLING THROUGH EACH PREDICTOR AND SMOOTH NET BENEFIT AND INTERVENTIONS AVOIDED \n  for(m in 1:pred.n) {\n    if (smooth==TRUE){\n      lws=loess(data.matrix(nb[!is.na(nb[[predictors[m]]]),predictors[m]]) ~ data.matrix(nb[!is.na(nb[[predictors[m]]]),\"threshold\"]),span=loess.span)\n      nb[!is.na(nb[[predictors[m]]]),paste(predictors[m],\"_sm\",sep=\"\")]=lws$fitted\n      \n      lws=loess(data.matrix(interv[!is.na(nb[[predictors[m]]]),predictors[m]]) ~ data.matrix(interv[!is.na(nb[[predictors[m]]]),\"threshold\"]),span=loess.span)\n      interv[!is.na(nb[[predictors[m]]]),paste(predictors[m],\"_sm\",sep=\"\")]=lws$fitted\n    }\n  }\n    \n  # PLOTTING GRAPH IF REQUESTED\n  if (graph==TRUE) {\n    require(graphics)\n    \n    # PLOTTING INTERVENTIONS AVOIDED IF REQUESTED\n    if(intervention==TRUE) {\n      # initialize the legend label, color, and width using the standard specs of the none and all lines\n      legendlabel <- NULL\n      legendcolor <- NULL\n      legendwidth <- NULL\n      legendpattern <- NULL\n      \n      #getting maximum number of avoided interventions\n      ymax=max(interv[predictors],na.rm = TRUE)\n      \n      #INITIALIZING EMPTY PLOT WITH LABELS\n      plot(x=nb$threshold, y=nb$all, type=\"n\" ,xlim=c(xstart, xstop), ylim=c(ymin, ymax), xlab=\"Threshold probability\", ylab=paste(\"Net reduction in interventions per\",interventionper,\"patients\"))\n      \n      #PLOTTING INTERVENTIONS AVOIDED FOR EACH PREDICTOR\n      for(m in 1:pred.n) {\n        if (smooth==TRUE){\n          lines(interv$threshold,data.matrix(interv[paste(predictors[m],\"_sm\",sep=\"\")]),col=m,lty=2)\n        } else {\n          lines(interv$threshold,data.matrix(interv[predictors[m]]),col=m,lty=2)\n        }\n        \n        # adding each model to the legend\n        legendlabel <- c(legendlabel, predictors[m])\n        legendcolor <- c(legendcolor, m)\n        legendwidth <- c(legendwidth, 1)\n        legendpattern <- c(legendpattern, 2)\n      }\n    } else {\n    # PLOTTING NET BENEFIT IF REQUESTED\n    \n      # initialize the legend label, color, and width using the standard specs of the none and all lines\n      legendlabel <- c(\"None\", \"All\")\n      legendcolor <- c(17, 8)\n      legendwidth <- c(2, 2)\n      legendpattern <- c(1, 1)\n      \n      #getting maximum net benefit\n      ymax=max(nb[names(nb)!=\"threshold\"],na.rm = TRUE)\n      \n      # inializing new benfit plot with treat all option\n      plot(x=nb$threshold, y=nb$all, type=\"l\", col=8, lwd=2 ,xlim=c(xstart, xstop), ylim=c(ymin, ymax), xlab=\"Threshold probability\", ylab=\"Net benefit\")\n      # adding treat none option\n      lines(x=nb$threshold, y=nb$none,lwd=2)\n      #PLOTTING net benefit FOR EACH PREDICTOR\n      for(m in 1:pred.n) {\n        if (smooth==TRUE){\n          lines(nb$threshold,data.matrix(nb[paste(predictors[m],\"_sm\",sep=\"\")]),col=m,lty=2) \n        } else {\n          lines(nb$threshold,data.matrix(nb[predictors[m]]),col=m,lty=2)\n        }\n        # adding each model to the legend\n        legendlabel <- c(legendlabel, predictors[m])\n        legendcolor <- c(legendcolor, m)\n        legendwidth <- c(legendwidth, 1)\n        legendpattern <- c(legendpattern, 2)\n      }\n    }\n    # then add the legend\n    legend(\"topright\", legendlabel, cex=0.8, col=legendcolor, lwd=legendwidth, lty=legendpattern)\n    \n  }\n  \n  #RETURNING RESULTS\n  results=list() \n  results$N=N\n  results$predictors=data.frame(cbind(predictors,harm,probability))\n  names(results$predictors)=c(\"predictor\",\"harm.applied\",\"probability\")\n  results$interventions.avoided.per=interventionper\n  results$net.benefit=nb\n  results$interventions.avoided=interv\n  \n  return(results)\n              \n}  \n \n\n\n",
    "created" : 1452649816876.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2754645809",
    "id" : "7FFA0945",
    "lastKnownWriteTime" : 1387391364,
    "path" : "~/DecisionCurve-All/decisioncurveanalysis/dca.r",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}