dcaData <-
r_data_frame(
n = 5000,
age,
dummy(prob = c(.46, .54), name = "Female"),
smokes,
Marker1 = runif,
Marker2 = rnorm
)
attach(dcaData)
lp <-   -10 +  log(1.25)*Age + log(.75)*Female + log(2)*Smokes + log(3)*Marker1 + log(.2)*Marker2
detach(dcaData)
expit <- function(xx) exp(xx)/ (1+exp(xx))
logit <- function(xx) log(xx/(1-xx))
dcaData$Cancer <- rbinom(500, size =1 , prob = expit(lp))
table(dcaData$Cancer)
dcaData$Cancer <- rbinom(5000, size =1 , prob = expit(lp))
table(dcaData$Cancer)
all.ind <- 1:5000
cc.ind  <- c(sample(cc.ind[dcaData$Cancer == 1], size = 250), sample(cc.ind[dcaData$Cancer ==0], size = 250))
cc.ind  <- c(sample(all.ind[dcaData$Cancer == 1], size = 250),
sample(all.ind[dcaData$Cancer ==0], size = 250))
dcaData_cc <- dcaData_cc[cc.ind, ]
dcaData_cc <- dcaData[cc.ind, ]
save(dcaData_cc, file = "data/dcaData_cc.rda")
mean(dcaData$Cancer)
library(DecisionCurve)
baseline.model <- decision_curve(Cancer~Age + Female + Smokes, #fitting a logistic model
data = dcaData,
study.design = "cohort",
bootstraps = 50)
library(DecisionCurve)
baseline.model <- decision_curve(Cancer~Age + Female + Smokes, #fitting a logistic model
data = dcaData,
study.design = "cohort",
bootstraps = 50)
plot_decision_curve(baseline.model,  curve.names = "baseline model")
data(dcaData)
head(dcaData)
set.seed(123)
#first use DecisionCurve with the default settings (set bootstraps = 50 here to reduce computation time).
baseline.model <- decision_curve(Cancer~Age + Female + Smokes, #fitting a logistic model
data = dcaData,
study.design = "cohort",
bootstraps = 50)
#plot the curve
plot_decision_curve(baseline.model,  curve.names = "baseline model")
set.seed(123)
full.model <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
data = dcaData,
bootstraps = 50)
#since we want to plot more than one curve, we pass a list of 'DecisionCurve' objects to the plot
plot_decision_curve( list(baseline.model, full.model),
curve.names = c("Baseline model", "Full model"))
plot_roc_components(full.model,  xlim = c(0, 0.4),
col = c("black", "red"))
#plot the clinical impact
plot_clinical_impact(full.model, xlim = c(0, .4),
col = c("black", "blue"))
baseline.model <- decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
thresholds = seq(0, .4, by = .001),# calculate thresholds from 0-0.4 at every 0.001 increment.
bootstraps = 25)
full.model <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
data = dcaData,
thresholds = seq(0, .4, by = .001),# calculate thresholds from 0-0.4 at every 0.001 increment.
bootstraps = 25)
plot_decision_curve( list(baseline.model, full.model),
curve.names = c("Baseline model", "Full model"),
col = c("blue", "red"),
lty = c(1,2),
lwd = c(3,2, 2, 1),  # the first two correspond to the decision curves, then 'all' and then 'none'
legend.position = "bottomright") #adjust the legend position
plot_decision_curve( list(baseline.model, full.model),
curve.names = c("Baseline model", "Full model"),
col = c("blue", "red"),
confidence.intervals = FALSE,  #remove confidence intervals
cost.benefit.axis = FALSE, #remove cost benefit axis
legend.position = "none") #remove the legend
plot_decision_curve( list(baseline.model, full.model),
curve.names = c("Baseline model", "Full model"),
col = c("blue", "red"),
cost.benefits = c("1:1000", "1:4", "1:9", "2:3", "1:3"),  #set specific cost benefits
legend.position = "bottomright")
baseline.model <- decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
thresholds = seq(0, .4, by = .01),
confidence.intervals = 0.9, #calculate 90% confidence intervals
bootstraps = 25)
full.model <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
data = dcaData,
thresholds = seq(0, .40, by = .01),
confidence.intervals = 0.9, #calculate 90% confidence intervals
bootstraps = 25)
plot_decision_curve( list(baseline.model, full.model),
curve.names = c("Baseline model", "Full model"),
col = c("blue", "red"),
ylim = c(-0.05, 0.15), #set ylim
lty = c(2,1),
standardize = FALSE, #plot Net benefit instead of standardized net benefit
legend.position = "topright")
expit <- function(xx) exp(xx)/ (1+exp(xx))
# Assume we have access to previously published models
# (or models built using a training set)
# that we can use to predict the risk of cancer.
# Basic model using demographic variables: Age, Female, Smokes.
dcaData$BasicModel <- with(dcaData, expit(-7.3 + 0.18*Age - 0.08*Female + 0.80*Smokes ) )
# Model using demographic + markers : Age, Female, Smokes, Marker1 and Marker2.
dcaData$FullModel <- with(dcaData, expit(-10.5 + 0.22*Age  - 0.01*Female + 0.91*Smokes + 2.03*Marker1 - 1.56*Marker2))
full.model <- decision_curve(Cancer~FullModel,
data = dcaData,
fitted.risk = TRUE,
thresholds = seq(0, .4, by = .05),
bootstraps = 25)
plot_decision_curve(full.model, legend.position = "none")
full.model <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
data = dcaData,
thresholds = seq(0, .4, by = .05),
bootstraps = 25)
summary(full.model) #outputs standardized net benefit by default
summary(full.model, nround = 2, measure = "TPR") #outputs standardized net benefit by default
head(full.model$derived.data)
data(dcaData_cc)
population.rho = 0.11
baseline.model_cc <- decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
thresholds = seq(0, .4, by = .001),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
baseline.model_cc <- decision_curve(Cancer~Age + Female + Smokes,
library(DecisionCurve)
data = dcaData,
thresholds = seq(0, .4, by = .001),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
baseline.model_cc <- decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
thresholds = seq(0, .4, by = .001),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
uu <- unique(outcome) #unique outcome levels
uu
outcome == uu[1]
outcome == uu[2]
for(b in 1:bootstraps){
ind.1 <- sample(all.ind[outcome == uu[1], ], replace = TRUE)
ind.2 <- sample(all.ind[outcome == uu[2], ], replace = TRUE)
B.ind[,b] <- c(ind.1, ind.2)
}
head(B.ind)
for(b in 1:bootstraps){
ind.1 <- sample(all.ind[outcome == uu[1], ], replace = TRUE)
ind.2 <- sample(all.ind[outcome == uu[2], ], replace = TRUE)
B.ind[,b] <- c(ind.1, ind.2)
}
head(B.ind)
library(DecisionCurve)
baseline.model_cc <- decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
thresholds = seq(0, .4, by = .001),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
library(DecisionCurve)
baseline.model_cc <- decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
thresholds = seq(0, .4, by = .001),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
library(DecisionCurve)
baseline.model_cc <- decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
thresholds = seq(0, .4, by = .001),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
library(DecisionCurve)
baseline.model_cc <- decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
thresholds = seq(0, .4, by = .001),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
offset
do.call(glm, list("formula" = formula, "data" = data, "family" = family, "offset" = offset ))
myglm <- do.call(glm, list("formula" = formula, "data" = data, "family" = family, "offset" = rep(offset, nrow(data)) ))
myglm
baseline.model
myglm <- do.call(glm, list("formula" = formula, "data" = data, "family" = family, "offset" = rep(offset, nrow(data)) ))
myglm
glm(Cancer~Age+Female+Smokes, data = dcaData, family = binomial())
library(DecisionCurve)
baseline.model_cc <- decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
thresholds = seq(0, .4, by = .001),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
full.model_cc <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
data = dcaData,
thresholds = seq(0, .4, by = .001),
bootstraps = 25
study.design = "case-control",
population.prevalence = population.rho)
full.model_cc <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
data = dcaData,
thresholds = seq(0, .4, by = .001),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
plot_decision_curve( list(baseline.model_cc, full.model_cc),
curve.names = c("Baseline model", "Full model"),
col = c("blue", "red"),
lty = c(1,2),
lwd = c(3,2, 2, 1),  # the first two correspond to the decision curves, then 'all' and then 'none'
legend.position = "bottomright") #adjust the legend position
baseline.model_cc <- decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
thresholds = seq(0, .4, by = .01),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
full.model_cc <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
data = dcaData,
thresholds = seq(0, .4, by = .01),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
plot_decision_curve( list(baseline.model_cc, full.model_cc),
curve.names = c("Baseline model", "Full model"),
col = c("blue", "red"),
lty = c(1,2),
lwd = c(3,2, 2, 1),  # the first two correspond to the decision curves, then 'all' and then 'none'
legend.position = "bottomright") #adjust the legend position
baseline.model
baseline.model <- decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
thresholds = seq(0, .4, by = .01),
bootstraps = 25)
full.model <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
data = dcaData,
thresholds = seq(0, .40, by = .01),
bootstraps = 25)
plot_decision_curve( list(baseline.model, full.model),
curve.names = c("Baseline model", "Full model"),
col = c("blue", "red"),
ylim = c(-0.05, 0.15), #set ylim
lty = c(2,1),
standardize = FALSE, #plot Net benefit instead of standardized net benefit
legend.position = "topright")
plot_decision_curve( list(baseline.model_cc, full.model_cc),
curve.names = c("Baseline model", "Full model"),
col = c("blue", "red"),
lty = c(1,2),
lwd = c(3,2, 2, 1),  # the first two correspond to the decision curves, then 'all' and then 'none'
legend.position = "bottomright") #adjust the legend position
plot_decision_curve( list(baseline.model, full.model),
curve.names = c("Baseline model", "Full model"),
col = c("blue", "red"),
lty = c(1,2),
lwd = c(3,2, 2, 1),  # the first two correspond to the decision curves, then 'all' and then 'none'
legend.position = "bottomright") #adjust the legend position
table(dcaData_cc$Cancer)
library(DecisionCurve)
library(DecisionCurve)
tools::showNonASCIIfile('DESCRI')
tools::showNonASCIIfile('DESCRIPTION')
library(DecisionCurve)
?decision_curve
library(caret)
createFolds()
createFolds
library(DecisionCurve)
library(DecisionCurve)
y
myfolds <- createFolds(y = dcaData$Cancer)
myfolds
library(DecisionCurve)
baseline.model_cc <- decision_curve(Cancer~Age + Female + Smokes,
data = dcaData_cc,
thresholds = seq(0, .4, by = .01),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
population.rho = 0.11
baseline.model_cc <- decision_curve(Cancer~Age + Female + Smokes,
data = dcaData_cc,
thresholds = seq(0, .4, by = .01),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
full.model_cc <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
data = dcaData_cc,
thresholds = seq(0, .4, by = .01),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
plot_decision_curve( list(baseline.model_cc, full.model_cc),
curve.names = c("Baseline model", "Full model"),
col = c("blue", "red"),
lty = c(1,2),
lwd = c(3,2, 2, 1),
legend.position = "bottomright")
full.model_cc <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
data = dcaData_cc,
bootstraps = 25,
population.prevalence = population.rho)
study.design = "case-control",
library(DecisionCurve)
thresholds = seq(0, .4, by = .01),
full.model_cc <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
data = dcaData_cc,
thresholds = seq(0, .4, by = .01),
bootstraps = 25,
study.design = "case-control",
population.prevalence = population.rho)
myglme
myglm
glm(Cancer~Age+Female+Smokes+Marker1+Marker2, data = dcaData, family = binomial)
glm(Cancer~Age+Female+Smokes+Marker1+Marker2, data = dcaData_cc, family = binomial)
myglm
predict(myglm)
y <- predict(myglm, type = "response")
y
library(DecisionCurve)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
thresholds = seq(0, .4, by = .01))
library(DecisionCurve)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 5,
thresholds = seq(0, .4, by = .01))
library(DecisionCurve)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 5,
thresholds = seq(0, .4, by = .01))
decision_curve(formula = formula,
data = data[myfolds.ind[[k]], ],
family = family,
fitted.risk = FALSE,
thresholds = thresholds,
confidence.intervals = "none",
study.design = study.design,
population.prevalence = population.prevalence)
tmp <- decision_curve(formula = formula,
data = data[myfolds.ind[[k]], ],
family = family,
fitted.risk = FALSE,
thresholds = thresholds,
confidence.intervals = "none",
study.design = study.design,
population.prevalence = population.prevalence)
tmp
out <- list()
out$derived.data <- decision_curve(formula = formula,
data = data[myfolds.ind[[1]], ],
family = family,
fitted.risk = FALSE,
thresholds = thresholds,
confidence.intervals = "none",
study.design = study.design,
population.prevalence = population.prevalence)$derived.data
out$derived.data
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
thresholds = seq(0, .4, by = .01))
folds = 5,
library(DecisionCurve)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 5,
thresholds = seq(0, .4, by = .01))
library(DecisionCurve)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 5,
thresholds = seq(0, .4, by = .01))
out
out$derived.data[,1:8]
library(DecisionCurve)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 5,
thresholds = seq(0, .4, by = .01))
out
library(DecisionCurve)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 5,
thresholds = seq(0, .4, by = .01))
out$derived.data[,1:8] <- cbind(out$derived.data[,1:8]/folds, out$derived.data[,-c(1:8)])
out
library(DecisionCurve)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 5,
thresholds = seq(0, .4, by = .01))
library(DecisionCurve)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 5,
thresholds = seq(0, .4, by = .01))
full.model_apparent <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
data = dcaData,
thresholds = seq(0, .4, by = .01),
confidence.intervals = 'none')
plot_decision_curve( list(full.model_apparent, full.model_cv),
curve.names = c("Apparent curve", "Cross-validated curve"),
col = c("blue", "red"),
lty = c(1,2),
lwd = c(3,2, 2, 1),
legend.position = "bottomright")
plot_decision_curve( list(full.model_apparent, full.model_cv),
curve.names = c("Apparent curve", "Cross-validated curve"),
col = c("red", "blue"),
lty = c(2,1),
lwd = c(3,2, 2, 1),
legend.position = "bottomright")
plot_decision_curve( list(full.model_apparent, full.model_cv),
curve.names = c("Apparent curve", "Cross-validated curve"),
col = c("red", "blue"),
lty = c(2,1),
lwd = c(3,2, 2, 1),
legend.position = "bottomright")
library(DecisionCurve)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 5,
thresholds = seq(0, .4, by = .01))
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 5,
thresholds = seq(0, .4, by = .01))
library(DecisionCurve)
out$derived.data
out$derived.data <- decision_curve(formula = formula,
data = data,
fitted.risk = FALSE,
thresholds = thresholds,
confidence.intervals = "none",
study.design = study.design,
population.prevalence = population.prevalence)$derived.data
out$derived.data[, 2:8]
out$derived.data[, 2:8] <- 0
out$derived.data[, 2:8]
outcome
stopifnot(is.numeric(outcome))
stopifnot(min(outcome) == 0)
k
k = 1
data[-myfold.ind[[k]], ]
data[-myfolds.ind[[k]], ]
tt <- data[-myfolds.ind[[k]], ]
nrow(tt)
nrow(data)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 500,
thresholds = seq(0, .4, by = .01))
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 500,
thresholds = seq(0, .4, by = .01))
library(DecisionCurve)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 500,
thresholds = seq(0, .4, by = .01))
myfolds.ind
lapply(myfolds.ind, FUN = function(x){ table(outcome[x])})
lapply(myfolds.ind, FUN = function(x){ if(length(table(outcome[x]))) stop("too many folds: there are not enough cases to allocate across all folds")})
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 5,
thresholds = seq(0, .4, by = .01))
lapply(myfolds.ind, FUN = function(x){ if(length(table(outcome[x]))) stop("too many folds: there are not enough cases to allocate across all folds")})
lapply(myfolds.ind, FUN = function(x){ if(length(table(outcome[x])) < 2) stop("too many folds: there are not enough cases to allocate across all folds")})
lapply(myfolds.ind, FUN = function(x){ if(any(table(outcome[x]))<5) stop("too many folds: there are not enough cases to allocate across all folds")})
lapply(myfolds.ind, FUN = function(x){ table(outcome[x])})
lapply(myfolds.ind, FUN = function(x){ min(table(outcome[x]))})
lapply(myfolds.ind, FUN = function(x){ if(min(table(outcome[x]))<5) stop("too many folds: there are not enough cases to allocate at least 5 cases into each fold.")})
library(DecisionCurve)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 5,
thresholds = seq(0, .4, by = .01))
library(DecisionCurve)
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes,
data = dcaData,
folds = 5,
thresholds = seq(0, .4, by = .01))
full.model_apparent <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
data = dcaData,
thresholds = seq(0, .4, by = .01),
confidence.intervals = 'none')
plot_decision_curve( list(full.model_apparent, full.model_cv),
curve.names = c("Apparent curve", "Cross-validated curve"),
col = c("red", "blue"),
lty = c(2,1),
lwd = c(3,2, 2, 1),
legend.position = "bottomright")
library(DecisionCurve)
summary(full.model_cv)
full.model_cv
library(DecisionCurve)
summary(full.model_cv)
